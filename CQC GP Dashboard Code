%Python

#Load the CQC tables and commissioner hierarchies tables from the lake
Locations_SCD = spark.read.parquet("abfss://unrestricted@udalstdatacuratedprod.dfs.core.windows.net/reference/UKHD/CQC/Locations_SCD/Published/1/")
Locations_LinkTable_Current_Ratings = spark.read.parquet("abfss://unrestricted@udalstdatacuratedprod.dfs.core.windows.net/reference/UKHD/CQC/Locations_LinkTable_Current_Ratings/Published/1/")
Locations_LinkTable_Inspection_Categories = spark.read.parquet("abfss://unrestricted@udalstdatacuratedprod.dfs.core.windows.net/reference/UKHD/CQC/Locations_LinkTable_Inspection_Categories/Published/1/")
commissioner_hierarchies = spark.read.parquet("abfss://reporting@udalstdatacuratedprod.dfs.core.windows.net/unrestricted/reference/UKHD/ODS/Commissioner_Hierarchies/")

%Python
#Create sql tables in databricks
Locations_SCD.createOrReplaceTempView("Locations_SCD")
Locations_LinkTable_Current_Ratings.createOrReplaceTempView("Locations_LinkTable_Current_Ratings")
Locations_LinkTable_Inspection_Categories.createOrReplaceTempView("Locations_LinkTable_Inspection_Categories")
commissioner_hierarchies.createOrReplaceTempView("commissioner_hierarchies")


#Obtain the latest GP ratings from the tables
%sql

DROP TABLE IF EXISTS tbl_CQC_GP_Current_Ratings;
CREATE OR REPLACE Table tbl_CQC_GP_Current_Ratings AS

SELECT
    a.locationId AS Location_ID,
    a.name AS Location_Name,
    a.onspdCcgCode,
    a.onspdCcgName,
    a.odsCode,
    a.odsCcgCode,
    a.odsCcgName,
    a.onspdLatitude,
    a.onspdLongitude,
    a.API_Call_Date,
    b.name AS Domain,
    CASE
        WHEN b.rating = 'Inspected but not rated' THEN 'No published rating'
        WHEN b.rating = 'Insufficient evidence to rate' THEN 'No published rating'
        ELSE COALESCE(b.rating, 'No published rating')
    END AS Latest_Rating,
    CAST(b.reportDate AS STRING) AS Publication_Date,
    c.name AS Location_Primary_Inspection_Category,
    d.STP_Code AS ODS_STP_Code,
    d.STP_Name AS ODS_STP_Name,
    d.Region_Code AS ODS_Region_Code,
    d.Region_Name AS ODS_Region_Name,
    e.STP_Code AS ONSPD_STP_Code,
    e.STP_Name AS ONSPD_STP_Name,
    e.Region_Code AS ONSPD_Region_Code,
    e.Region_Name AS ONSPD_Region_Name
FROM
    Locations_SCD a
    INNER JOIN Locations_LinkTable_Current_Ratings b
        ON a.locationId = b.locationID
        AND a.API_Call_Date = b.API_Call_Date
    INNER JOIN Locations_LinkTable_Inspection_Categories c
        ON b.locationID = c.locationID
        AND b.API_Call_Date = c.API_Call_Date
    LEFT JOIN commissioner_hierarchies d
        ON a.odsCcgCode = d.Organisation_Code
    LEFT JOIN commissioner_hierarchies e
        ON a.onspdCcgName = e.Organisation_Name
WHERE
    a.Is_Latest = 1
    AND a.registrationStatus = 'Registered'
    AND a.organisationType = 'Location'
    AND c.name = 'GP Practices'
    AND c.primary = 'true'


UNION

SELECT
    a.locationId AS Location_ID,
    a.name AS Location_Name,
    a.onspdCcgCode,
    a.onspdCcgName,
    a.odsCode,
    a.odsCcgCode,
    a.odsCcgName,
    a.onspdLatitude,
    a.onspdLongitude,
    a.API_Call_Date,
    'Overall' AS Domain,
    CASE
        WHEN a.overallRating = 'Inspected but not rated' THEN 'No published rating'
        WHEN a.overallRating = 'Insufficient evidence to rate' THEN 'No published rating'
        ELSE COALESCE(a.overallRating, 'No published rating')
    END AS Latest_Rating,
    CAST(a.overallReportDate AS STRING) AS Publication_Date,
    b.name AS Location_Primary_Inspection_Category,
    c.STP_Code AS ODS_STP_Code,
    c.STP_Name AS ODS_STP_Name,
    c.Region_Code AS ODS_Region_Code,
    c.Region_Name AS ODS_Region_Name,
    d.STP_Code AS ONSPD_STP_Code,
    d.STP_Name AS ONSPD_STP_Name,
    d.Region_Code AS ONSPD_Region_Code,
    d.Region_Name AS ONSPD_Region_Name
FROM
    Locations_SCD a
    INNER JOIN Locations_LinkTable_Inspection_Categories b
        ON a.locationId = b.locationID
        AND a.API_Call_Date = b.API_Call_Date
    LEFT JOIN commissioner_hierarchies c
        ON a.odsCcgCode = c.Organisation_Code
    LEFT JOIN commissioner_hierarchies d
        ON a.onspdCcgName = d.Organisation_Name
WHERE
    a.Is_Latest = 1
    AND a.registrationStatus = 'Registered'
    AND a.organisationType = 'Location'
    AND b.name = 'GP Practices'
    AND b.primary = 'true';



%sql
 #This moves/adds the correct onspdccgNames to some GP locations


Update tbl_CQC_GP_Current_Ratings
set onspdCcgName ='NHS Buckinghamshire CCG'
where Location_ID ='1-13701124987';


--Move 1-553824273 The Silton Surgery to NHS Bath and North Somerset, Swindon and Whiltshire Integrated Care Board--
Update tbl_CQC_GP_Current_Ratings
set onspdCcgName ='NHS Bath and North East Somerset, Swindon and Wiltshire CCG'
where Location_ID ='1-553824273';


-----Move 1-547508730 Drs Hawson & Morgan to NHS Bath and North Somerset, Swindon and Whiltshire Integrated Care Board--

Update tbl_CQC_GP_Current_Ratings
set onspdCcgName ='NHS Bath and North East Somerset, Swindon and Wiltshire CCG'
where Location_ID ='1-547508730';

----- Move 1-Holyhead Primary care health centre to NHS Birmingham and SoliHull ICB - 15E Integrated Care Board -----

Update tbl_CQC_GP_Current_Ratings
set onspdCcgName = 'NHS Birmingham and Solihull CCG'
where location_ID = '1-14772935220';


----- Move 1-10941679331 Great Barr Medical Practice to NHS Birmingham and SoliHull ICB - 15E Integrated Care Board -----
Update tbl_CQC_GP_Current_Ratings
set onspdCcgName = 'NHS Black Country and West Birmingham CCG'
where location_ID = '1-10941679331';

----- Add onspdccgname for Saddlers Health Centre---
Update tbl_CQC_GP_Current_Ratings
set onspdCcgName ='NHS Black Country and West Birmingham CCG'
where Location_ID ='1-551547882';

----- Add onspdccgname for Hartshill Health Centre--- 
Update tbl_CQC_GP_Current_Ratings
set onspdCcgName = 'NHS Coventry and Rugby CCG'
where Location_ID = '1-15778837347';

----- Add onspdccgname for Edenbridge Medical Practice---
Update tbl_CQC_GP_Current_Ratings
Set onspdCcgName = 'NHS Kent and Medway CCG'
where Location_ID = '1-18178922598';

----- Add oncpdccgname for The Spires Health Centre ---
Update tbl_CQC_GP_Current_Ratings
Set onspdCcgName = 'NHS Black Country and West Birmingham CCG'
where Location_ID = '1-19677557535';

----- Add oncpdccgname for St James Medical Practice ---
Update tbl_CQC_GP_Current_Ratings
Set onspdCcgName = 'NHS Norfolk and Waveney CCG'
where Location_ID = '1-19894382880';



%sql

 #This retrieves the SAF ratings for all locations from the JSON text in the Location_SCD table and saves the data in the CQC assessment ratings table

DROP VIEW IF EXISTS AssessmentRatings;

CREATE OR REPLACE TEMP VIEW AssessmentRatings AS

SELECT locationId as Location_ID,
       name as Location_Name,
	   onspdCcgCode as onspdCcgCode,
	   onspdCcgName as onspdCcgName,
	   odsCode as odsCode,
	   odsCcgCode as odsCcgCode,
	   odsCcgName as odsCcgName,
	   onspdLatitude as onspdLatitude,
	   onspdLongitude as onspdLongitude,
	   API_Call_Date as API_Call_Date,
       numberOfBeds as Number_Of_Bed,
	   careHome as Care_Home,
	   type as Service_Type,
      get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].title') as title,
	    get_json_object(JSON_Plain_Text, '$.lastInspection.date') as lastInspectionDate,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].keyQuestionRatings[0].name') as Domain,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].keyQuestionRatings[0].rating') as Latest_rating,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].name') as ServiceName,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].assessmentDate') as AssessmentDate,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].assessmentPlanPublishedDateTime') as Publication_Date,
	   Getdate() as DateUpdated
	
FROM Locations_SCD
where JSON_Plain_Text IS NOT NULL
and registrationStatus='Registered' 
and organisationType='Location' and JSON_Plain_Text LIKE '%assessmentPlanId%' and Is_Latest ='1' 

UNION
SELECT locationId as Location_ID,
       name as Location_Name,
	   onspdCcgCode as onspdCcgCode,
	   onspdCcgName as onspdCcgName,
	   odsCode as odsCode,
	   odsCcgCode as odsCcgCode,
	   odsCcgName as odsCcgName,
	   onspdLatitude as onspdLatitude,
	   onspdLongitude as onspdLongitude,
	   API_Call_Date as API_Call_Date,
       numberOfBeds as Number_Of_Bed,
	   careHome as Care_Home,
	   type as Service_Type,
       get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].title') as title,
	    get_json_object(JSON_Plain_Text, '$.lastInspection.date') as lastInspectionDate,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].keyQuestionRatings[1].name') as Domain,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].keyQuestionRatings[1].rating') as Latest_rating,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].name') as ServiceName,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].assessmentDate') as AssessmentDate,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].assessmentPlanPublishedDateTime') as Publication_Date,
	   Getdate() as DateUpdated
	

FROM Locations_SCD
where JSON_Plain_Text IS NOT NULL
and registrationStatus='Registered' 
and organisationType='Location' and JSON_Plain_Text LIKE '%assessmentPlanId%' and Is_Latest ='1' 

UNION

SELECT locationId as Location_ID,
       name as Location_Name,
	   onspdCcgCode as onspdCcgCode,
	   onspdCcgName as onspdCcgName,
	   odsCode as odsCode,
	   odsCcgCode as odsCcgCode,
	   odsCcgName as odsCcgName,
	   onspdLatitude as onspdLatitude,
	   onspdLongitude as onspdLongitude,
	   API_Call_Date as API_Call_Date,
       numberOfBeds as Number_Of_Bed,
	   careHome as Care_Home,
	   type as Service_Type,
        get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].title') as title,
	   get_json_object(JSON_Plain_Text, '$.lastInspection.date') as lastInspectionDate,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].keyQuestionRatings[2].name') as Domain,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].keyQuestionRatings[2].rating') as Latest_rating,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].name') as ServiceName,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].assessmentDate') as AssessmentDate,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].assessmentPlanPublishedDateTime') as Publication_Date,
	 Getdate() as DateUpdated
	
FROM Locations_SCD
where JSON_Plain_Text IS NOT NULL
and registrationStatus='Registered' 
and organisationType='Location' and JSON_Plain_Text LIKE '%assessmentPlanId%' and Is_Latest ='1'
UNION

SELECT locationId as Location_ID,
       name as Location_Name,
	   onspdCcgCode as onspdCcgCode,
	   onspdCcgName as onspdCcgName,
	   odsCode as odsCode,
	   odsCcgCode as odsCcgCode,
	   odsCcgName as odsCcgName,
	   onspdLatitude as onspdLatitude,
	   onspdLongitude as onspdLongitude,
	   API_Call_Date as API_Call_Date,
       numberOfBeds as Number_Of_Bed,
	   careHome as Care_Home,
	   type as Service_Type,
        get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].title') as title,
	    get_json_object(JSON_Plain_Text, '$.lastInspection.date') as lastInspectionDate,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].keyQuestionRatings[3].name') as Domain,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].keyQuestionRatings[3].rating') as Latest_rating,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].name') as ServiceName,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].assessmentDate') as AssessmentDate,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].assessmentPlanPublishedDateTime') as Publication_Date,
	  Getdate() as DateUpdated
	
FROM Locations_SCD
where JSON_Plain_Text IS NOT NULL
and registrationStatus='Registered' 
and organisationType='Location' and JSON_Plain_Text LIKE '%assessmentPlanId%' and Is_Latest ='1' 

UNION
SELECT locationId as Location_ID,
       name as Location_Name,
	   onspdCcgCode as onspdCcgCode,
	   onspdCcgName as onspdCcgName,
	   odsCode as odsCode,
	   odsCcgCode as odsCcgCode,
	   odsCcgName as odsCcgName,
	   onspdLatitude as onspdLatitude,
	   onspdLongitude as onspdLongitude,
	   API_Call_Date as API_Call_Date,
       numberOfBeds as Number_Of_Bed,
	   careHome as Care_Home,
	   type as Service_Type,
       get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].title') as title,
	    get_json_object(JSON_Plain_Text, '$.lastInspection.date') as lastInspectionDate,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].keyQuestionRatings[4].name') as Domain,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].keyQuestionRatings[4].rating') as Latest_rating,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].name') as ServiceName,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].assessmentDate') as AssessmentDate,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].assessmentPlanPublishedDateTime') as Publication_Date,
	   Getdate() as DateUpdated
	
FROM Locations_SCD
where JSON_Plain_Text IS NOT NULL
and registrationStatus='Registered' 
and organisationType='Location' and JSON_Plain_Text LIKE '%assessmentPlanId%' and Is_Latest ='1' 

UNION

SELECT locationId as Location_ID,
       name as Location_Name,
	   onspdCcgCode as onspdCcgCode,
	   onspdCcgName as onspdCcgName,
	   odsCode as odsCode,
	   odsCcgCode as odsCcgCode,
	   odsCcgName as odsCcgName,
	   onspdLatitude as onspdLatitude,
	   onspdLongitude as onspdLongitude,
	   API_Call_Date as API_Call_Date,
       numberOfBeds as Number_Of_Bed,
	   careHome as Care_Home,
	   type as Service_Type,
        get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].title') as title,
	    get_json_object(JSON_Plain_Text, '$.lastInspection.date') as lastInspectionDate,
	   'Overall' as Domain,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].rating') as Latest_rating,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].name') as ServiceName,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].ratings.asgRatings[0].assessmentDate') as AssessmentDate,
	    get_json_object(JSON_Plain_Text, '$.assessment[0].assessmentPlanPublishedDateTime') as Publication_Date,
	  Getdate() as DateUpdated
	FROM Locations_SCD
where JSON_Plain_Text IS NOT NULL
and registrationStatus='Registered' 
and organisationType='Location' and JSON_Plain_Text LIKE '%assessmentPlanId%' and Is_Latest ='1' ;



#Create the final table for CQC Assessment Ratings

-- Check if the target table exists, if so, drop it
DROP TABLE IF EXISTS CQC_Assessment_Ratings;

--Insert data into the final table
CREATE TABLE CQC_Assessment_Ratings AS


Select Location_ID,
       Location_Name,
	   onspdCcgCode,
	   onspdCcgName,
	   odsCode,
	   odsCcgCode,
	   odsCcgName,
	   onspdLatitude,
	   onspdLongitude,
	   API_Call_Date,
       Number_Of_Bed,
	   Care_Home,
	   Service_Type,
       title,
	   lastInspectionDate,
	   Domain,
	   case
			when Latest_rating ='Inspected but not rated' then 'No published rating'
			when Latest_rating ='Insufficient evidence to rate' then 'No published rating'
			when Latest_rating ='No Approved Rating' then 'No published rating'
			when Latest_rating ='Not all regulations met' then 'No published rating'
			when Latest_rating ='Evidence requirements partially / not yet scored' then 'No published rating'
			when Latest_rating ='Regulations met' then 'No published rating'
			when Latest_rating ='' then 'No published rating'
			else COALESCE(Latest_rating,'No published rating')
			end as Latest_rating,
	   ServiceName,
	   AssessmentDate,
	   date_format(Publication_Date, 'yyyy-MM-dd') AS Publication_Date,
	   DateUpdated

	  FROM AssessmentRatings;

%sql
#This retrieves the latest CQC ratings for GP published from SAF (CQC Single Assessment Framework), combines with CQC ratings from previous process and saves the combined GP ratings data in a table in databricks.

DROP VIEW IF EXISTS Assess;
DROP VIEW IF EXISTS GP;
DROP VIEW IF EXISTS CareHome_GP;
DROP VIEW IF EXISTS GP_with_SAF;
DROP VIEW IF EXISTS Combined_GP_SAF;
--------------------------------------------------------------------------------------------------------------------------------------------------
-- STEP 1: Create a temporary table conntaining the Location_ID for each GP included in tbl_CQC_GP_Current_Ratings that also has ratings
--------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE TEMP VIEW Assess AS
SELECT DISTINCT Location_ID
FROM CQC_Assessment_Ratings
WHERE serviceName IN ('Care Homes', 'General Practice');

CREATE OR REPLACE TEMP VIEW GP AS
SELECT Distinct Location_ID
FROM tbl_CQC_GP_Current_Ratings;

CREATE OR REPLACE TEMP VIEW GP_with_SAF AS
SELECT Distinct a.Location_ID 
FROM GP a
LEFT JOIN Assess b  ON a.Location_ID = b.Location_ID
WHERE b.Location_ID is not null;

--select count(*) from  #GP_with_SAF
--343 rows
-----------------------------------------------------------------------------------------------------------------------------------------------
-- STEP 2: JOIN a subset of [Qualt].[tbl_CQC_GP_Current_Ratings] WHERE a.Latest_Rating = 'No published rating'
-- with [Qualt].[CQC_Assessment_Ratings] on Location_ID and API_Call_Date, for the set defined above into GP_with_SAF
-----------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE TEMP VIEW Combined_GP_SAF AS
SELECT a.Location_ID,
      a.Location_Name,
      a.onspdCcgCode,
      a.onspdCcgName,
      a.odsCode,
      a.odsCcgCode,
      a.odsCcgName,
      a.onspdLatitude,
      a.onspdLongitude,
      a.API_Call_Date,
      a.Domain,
      a.Latest_Rating,
      a.Publication_Date,
      ODS_STP_Code,
      ODS_STP_Name,
      ODS_Region_Code,
      ODS_Region_Name,
      ONSPD_STP_Code,
      ONSPD_STP_Name,
      ONSPD_Region_Code,
      ONSPD_Region_Name,
      b.Location_ID as SAF_Location_ID,
	b.Domain as SAF_Domain,
	b.Latest_rating as SAF_Latest_rating,
	b.AssessmentDate as SAF_AssessmentDate,
	b.Publication_Date as SAF_Publication_Date
     

 FROM tbl_CQC_GP_Current_Ratings a
LEFT JOIN CQC_Assessment_Ratings b ON a.Location_ID = b.Location_ID AND a.API_Call_Date = b.API_Call_Date 
WHERE a.Latest_Rating = 'No published rating'
AND a.Location_ID IN (SELECT Location_ID FROM GP_with_SAF);



---------------------------------------------------------------------------------------------------------------------------------------------------------------
-- STEP 3: Substitute the data for [Domain], [Latest_Rating], and [Publication_Date] from the SAF ratings table for the data in these columns 
---------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE TEMP VIEW Staging_Combined_GP_SAF AS
SELECT Location_ID,
      Location_Name,
      onspdCcgCode,
      onspdCcgName,
      odsCode,
      odsCcgCode,
      odsCcgName,
      onspdLatitude,
      onspdLongitude,
      API_Call_Date,
      SAF_Domain as Domain,
      SAF_Latest_rating as Latest_Rating,
      SAF_Publication_Date as Publication_Date,
      'GP Practices' as Location_Primary_Inspection_Category,
      ODS_STP_Code,
      ODS_STP_Name,
      ODS_Region_Code,
      ODS_Region_Name,
      ONSPD_STP_Code,
      ONSPD_STP_Name,
      ONSPD_Region_Code,
      ONSPD_Region_Name

FROM Combined_GP_SAF;



--------------------------------------------------------------------------------------------------------------------------------------------------------------
-- STEP 4: CREATE new combined Care Home ratings table 
-- i) Select from [Qualt].[tbl_CQC_GP_Current_Ratings] filtered to exclude Location_ID s included in the SAF ratings table [#Staging_Combined_GP_SAF] just created
-- ii) Union with the SAF ratings table [#Staging_Combined_GP_SAF] just created
--------------------------------------------------------------------------------------------------------------------------------------------------------------

DROP TABLE IF EXISTS tbl_CQC_GP_Ratings;

CREATE TABLE tbl_CQC_GP_Ratings AS
SELECT *		
FROM tbl_CQC_GP_Current_Ratings
WHERE Location_ID NOT in (Select Location_ID FROM GP_with_SAF)

UNION

SELECT *		
FROM Staging_Combined_GP_SAF;


%sql
-- Update the final output table - set Requires Improvement to Requires improvement

Update tbl_CQC_GP_Ratings
set  latest_rating = 'Requires improvement'
where Latest_Rating = 'Requires Improvement'

%Python

#Rewrite the final output and save as a CSV
From pyspark.sql import functions as F # Best practice to import functions as F (See RAP pyspark guidance)

def fn_test_file_exists(path_final_csv_save: str):

    path = path_final_csv_save

    try:
        files = dbutils.fs.ls(path)
        return True
    except:
        return False

def fn_write_dataframe_to_csv(df: F.DataFrame, path_final_csv_save: str): 

    path_temp_csv_save = path_final_csv_save + "_temp" 
 
    df.coalesce(1) \
        .write.mode("overwrite") \
        .option("encoding", "UTF-8") \
        .csv(path_temp_csv_save, header=True)  
 
    list_files = dbutils.fs.ls(path_temp_csv_save) 
 
    for sub_files in list_files: 
 
        if sub_files.name[-4:] == ".csv": 
 
            dbutils.fs.cp("/".join([path_temp_csv_save, sub_files.name]), path_final_csv_save) 
 
    _ = dbutils.fs.rm(path_temp_csv_save, recurse=True) # assigning to _ to suppress output, returning this is not important


%Python

Save the final output in the Q&I Lake

mixed_final_df = spark.table("tbl_CQC_GP_Ratings") # This takes the TEMP VIEW tbl_CQC_Carehome_Ratings created using SQL and ensures that the function can read it. (coded in SQL to create the TEMP VIEW)
path_final_csv_save = "abfss://analytics-projects@udalstdataanalysisprod.dfs.core.windows.net/QualityImprovement/Quality/CQC/tbl_CQC_GP_Ratings.csv"  
#Delete the file if it already exists,avaiding an issue with permission to overwrite the file if it was previously created by someone else:
if fn_test_file_exists(path_final_csv_save) ==True:

    dbutils.fs.rm(path_final_csv_save, recurse=True) 
    
fn_write_dataframe_to_csv(df=mixed_final_df, path_final_csv_save=path_final_csv_save)





